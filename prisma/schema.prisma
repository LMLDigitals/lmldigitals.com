generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Staff {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String
  number        String
  location      String
  role          Role            @relation(fields: [roleId], references: [id])
  roleId        String
  jobTitle      String          @default("technician")
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roleId])
}

model Customer {
  id              String          @id @default(cuid())
  name            String
  email           String          @unique
  password        String
  number          String
  address         String?
  city            String?
  state           String?
  zip             String?
  location        String
  referralCode    String          @unique
  pendingDiscount Int             @default(0)
  role            Role            @relation(fields: [roleId], references: [id])
  roleId          String
  jobTitle        String          @default("customer")
  accounts        Account[]
  sessions        Session[]
  rewards         Reward[]
  referedBy       String?
  // Optional for WebAuthn support
  Authenticator   Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roleId])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  staff       Staff[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  StaffInvitation StaffInvitation[]
  Customer        Customer[]
}

model Account {
  id                       String    @id @default(cuid())
  userId                   String    @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?   @db.Text
  access_token             String?   @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?   @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  staff                    Staff?    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_staff_userId_fkey")
  customer                 Customer? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_customer_userId_fkey")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  staff        Staff?    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_staff_userId_fkey")
  customer     Customer? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_customer_userId_fkey")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model StaffInvitation {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  used      Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roleId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  staff    Staff?    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Authenticator_staff_userId_fkey")
  customer Customer? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Authenticator_customer_userId_fkey")

  @@id([userId, credentialID])
}

model Reward {
  id          String  @id @default(cuid())
  customerId  String
  amount      Int
  description String?
  redeemed    Boolean @default(false)

  customer Customer @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
}
